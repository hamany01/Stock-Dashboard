import streamlit as st
import configparser
import yfinance as yf
import pandas as pd
import ta
import database as db
import investpy
from datetime import date, timedelta
from gnews import GNews
import requests

# --- ุฅุนุฏุงุฏุงุช ุงูุตูุญุฉ ูุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ---
st.set_page_config(page_title="ูุฏูุฑ ุงููุญูุธุฉ ุงูุฐูู", layout="wide")
st.title("๐ ูุฏูุฑ ุงููุญูุธุฉ ุงูุฐูู ููุณูู ุงูุณุนูุฏู")
conn = db.create_connection()
if conn:
    db.create_table(conn)

# --- ุงูุฏูุงู ุงูุชุญููููุฉ ูุงูุฐูุงุก ุงูุงุตุทูุงุนู ---
API_URL = "https://api-inference.huggingface.co/models/CAMeL-Lab/bert-base-arabic-camelbert-da-sentiment"

@st.cache_data(ttl="10m")
def get_stock_data(symbol):
    """ูุฌูุจ ุจูุงูุงุช ุงูุณูู ูู yfinanceุ ูุฅุฐุง ูุดูุ ูุฌุฑุจ investpy."""
    try:
        data = yf.download(symbol, period="1y", progress=False, auto_adjust=True)
        if data.empty: raise ValueError("yfinance did not return data")
    except Exception:
        try:
            st.warning(f"ุงููุตุฏุฑ ุงูุฃูู ูุดู ูุณูู {symbol}ุ ุฌุงุฑู ูุญุงููุฉ ุงููุตุฏุฑ ุงูุงุญุชูุงุทู...")
            end_date = date.today()
            start_date = end_date - timedelta(days=365)
            search_result = investpy.search_quotes(text=symbol.split('.')[0], products=['stocks'], countries=['saudi arabia'], n_results=1)
            data = search_result.retrieve_historical_data(from_date=start_date.strftime('%d/%m/%Y'), to_date=end_date.strftime('%d/%m/%Y'))
            if data.empty: return None, f"ูุดู ุงููุตุฏุฑุงู"
        except Exception as e_investpy: return None, f"ูุดู ุงููุตุฏุฑุงู: {e_investpy}"
            
    try:
        close_prices = pd.Series(data['Close'].values)
        data['RSI'] = ta.momentum.RSIIndicator(close=close_prices).rsi()
        macd = ta.trend.MACD(close=close_prices)
        data['MACD'] = macd.macd()
        data['MACD_signal'] = macd.macd_signal()
        return data, None
    except Exception as e_ta: return None, f"ูุดู ุงูุชุญููู ุงูููู: {e_ta}"

@st.cache_data(ttl="1h")
def analyze_news_sentiment(stock_name):
    """ุฌูุจ ูุชุญููู ูุดุงุนุฑ ุงูุฃุฎุจุงุฑ ุจุงุณุชุฎุฏุงู API."""
    try:
        if 'HF_TOKEN' not in st.secrets:
            return "ููุชุงุญ Hugging Face ุบูุฑ ููุฌูุฏ ูู ุงูุฃุณุฑุงุฑ (Secrets)", []
        
        headers = {"Authorization": f"Bearer {st.secrets['HF_TOKEN']}"}
        
        google_news = GNews(language='ar', country='SA', max_results=5)
        news = google_news.get_news(stock_name)
        
        if not news:
            return "ูุง ุชูุฌุฏ ุฃุฎุจุงุฑ ุญุฏูุซุฉ", []
        
        titles = [article['title'] for article in news]
        
        response = requests.post(API_URL, headers=headers, json={"inputs": titles})
        results = response.json()

        if isinstance(results, dict) and 'error' in results:
             return f"ุฎุทุฃ ูู ุงูู API: {results['error']}", []

        sentiment_scores = {'POSITIVE': 0, 'NEGATIVE': 0, 'NEUTRAL': 0}
        analyzed_articles = []

        for i, result_list in enumerate(results):
            best_result = max(result_list, key=lambda x: x['score'])
            label = best_result['label']
            sentiment_scores[label] += 1
            analyzed_articles.append({'title': titles[i], 'sentiment': label})

        if sentiment_scores['POSITIVE'] > sentiment_scores['NEGATIVE']:
            overall_sentiment = "ุฅูุฌุงุจู ๐"
        elif sentiment_scores['NEGATIVE'] > sentiment_scores['POSITIVE']:
            overall_sentiment = "ุณูุจู ๐"
        else:
            overall_sentiment = "ูุญุงูุฏ ๐"
            
        return overall_sentiment, analyzed_articles
    except Exception as e:
        return f"ุฎุทุฃ ูู ุชุญููู ุงูุฃุฎุจุงุฑ: {e}", []

# --- ุชุตููู ุงููุงุฌูุฉ ---
tab1, tab2, tab3 = st.tabs(["ูุญูุธุชู", "ูุธุฑุฉ ุนูู ุงูุณูู", "ูุฑุต ุงุณุชุซูุงุฑูุฉ (AI)"])
# (ุงูููุฏ ุงูุฎุงุต ุจุงูุชุจููุจ ุงูุฃูู ูุงูุซุงูู ูุจูู ููุง ูู)
with tab1:
    st.header("ูุญูุธุชู ุงูุงุณุชุซูุงุฑูุฉ")
    # ...
with tab2:
    st.header("ูุธุฑุฉ ุดุงููุฉ ุนูู ุงูุณูู")
    # ...

# --- ุงูุชุจููุจ ุงูุซุงูุซ: ูุฑุต ุงุณุชุซูุงุฑูุฉ (AI) ---
with tab3:
    st.header("๐ฌ ุชุญููู ูุดุงุนุฑ ุงูุฃุฎุจุงุฑ ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู")
    st.markdown("ุงุฎุชุฑ ุณูููุง ูู ุงููุงุฆูุฉ ููููู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุจุงูุจุญุซ ุนู ุขุฎุฑ ุงูุฃุฎุจุงุฑ ุงููุชุนููุฉ ุจู ูุชุญููู ูุดุงุนุฑูุง.")

    config = configparser.ConfigParser()
    config.read('config.ini')
    stocks_dict = dict(config['TadawulStocks'].items())
    display_list = [f"{symbol} - {name}" for symbol, name in stocks_dict.items()]

    selected_stock_display = st.selectbox("ุงุฎุชุฑ ุงูุณูู ููุชุญููู:", display_list, key="ai_stock_selector")

    if st.button("ุชุญููู ูุดุงุนุฑ ุงูุฃุฎุจุงุฑ ุงูุขู", key="ai_analyze_button"):
        stock_symbol = selected_stock_display.split(' - ')[0]
        stock_name = stocks_dict[stock_symbol]

        with st.spinner(f"โณ ุฌุงุฑู ุงูุจุญุซ ุนู ุฃุฎุจุงุฑ '{stock_name}' ูุชุญููููุง ุนุจุฑ ุงูู API..."):
            overall_sentiment, articles = analyze_news_sentiment(stock_name)
        
        st.subheader(f"ูุชูุฌุฉ ุชุญููู ุงููุดุงุนุฑ ูุณูู: {stock_name}")
        st.metric("ุงูุดุนูุฑ ุงูุนุงู ููุฃุฎุจุงุฑ", str(overall_sentiment))

        with st.expander("ุนุฑุถ ุชูุงุตูู ุงูุฃุฎุจุงุฑ ุงูุชู ุชู ุชุญููููุง"):
            if articles:
                for article in articles:
                    sentiment_emoji = "๐" if article['sentiment'] == 'POSITIVE' else '๐' if article['sentiment'] == 'NEGATIVE' else '๐'
                    st.markdown(f"- {article['title']} **({sentiment_emoji})**")
            else:
                st.write("ูู ูุชู ุงูุนุซูุฑ ุนูู ููุงูุงุช ูุชุญููููุง.")
